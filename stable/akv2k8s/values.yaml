# Default values 

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  podSecurityPolicies:
    {}

global: # values to be applied globally
  env: {} # env vars to be used with all enabled pods, eg. for akv credentials

runningInsideAzureAks: true
addAzurePodIdentityException: false
cloudConfig: /etc/kubernetes/azure.json
# Azure Key Vault certificate authentication
azureCertificate:
  enabled: false
  secret: akv2k8s-certificate
  key: akv2k8s-certificate.p12
  path: /etc/azure/

controller:
  enabled: true
  name: controller
  image:
    repository: spvest/azure-keyvault-controller
    tag: 1.1.0
    pullPolicy: IfNotPresent

  keyVault:
    # Set to true to use custom auth - see https://akv2k8s.io/security/authentication/#custom-authentication-for-the-controller
    customAuth:
      enabled: false

    polling:
      normalInterval: 1m
      failureInterval: 10m
      failureAttempts: 5

  logLevel: info
  logFormat: fmt # fmt or json
  
  serviceAccount:
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name:

  env: {}
  labels: {}
  podLabels: {}

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

env_injector:
  enabled: true
  name: env-injector

  replicaCount: 2

  image:
    repository: spvest/azure-keyvault-webhook
    tag: 1.1.10
    pullPolicy: IfNotPresent

  envImage:
    repository: spvest/azure-keyvault-env
    tag: 1.1.1

  keyVault:
    # Set to true to use custom auth - see https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/blob/master/README.md#authentication
    customAuth: 
      enabled: false
      useAuthService: true # set to false to use Azure Key Vault credentials from own pod

  dockerImageInspection:
    timeout: 20 # Timeout in seconds
    useAksCredentialsWithACS: true # Only applicable if runningInsideAzureAks is also true

  caBundleController:
    image:
      repository: spvest/ca-bundle-controller
      tag: 1.1.0
      pullPolicy: IfNotPresent
    env: {}
    labels: {}
    podLabels: {}
    logLevel: Info
    logFormat: fmt # fmt or json
    akvLabelName: azure-key-vault-env-injection
    configMapName: akv2k8s-ca

  service:
    name: azure-keyvault-secrets-webhook
    type: ClusterIP
    externalTlsPort: 443
    internalTlsPort: 443
    externalHttpPort: 80
    internalHttpPort: 80

  metrics:
    enabled: false
    port: 8443
    serviceMonitor:
      enabled: false
      scheme: https
      tlsConfig:
        insecureSkipVerify: true
      additionalLabels: {}

  webhook:
    logLevel: Info
    logFormat: fmt # ftm or json

    securityContext:
      allowPrivilegeEscalation: true # must be true if using aks identity
    #   runAsUser: 65534

    env: {}
    labels: {}
    podLabels: {}

    certificate:
      useCertManager: false
      custom:
        enabled: false
        server:
          tls:
            crt:
            key:
        ca:
          crt:

    ## See `kubectl explain poddisruptionbudget.spec` for more
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podDisruptionBudget:
      enabled: true
      minAvailable: 1
    #  maxUnavailable: 1

    # What will happen if the webhook fails? Ignore (continue) or Fail (prevent Pod from starting)?
    failurePolicy: Fail

    # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    namespaceSelector:
      matchLabels:
        azure-key-vault-env-injection: enabled # The webhook will only trigger i namespaces with this label

      # Prevent env injection for pods in kube-system as recomended: https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#avoiding-operating-on-the-kube-system-namespace
      matchExpressions:
      - key: name
        operator: NotIn
        values:
        - kube-system

  serviceAccount:
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name:

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}